------------------------------------------------------------------------------------------------------------------------
Program -> Heading DeclarationSec Execution

----------------------------------------------------Heading-------------------------------------------------------------
Heading -> ProgramID Uses
ProgramID -> program identifier ;
Uses -> uses PackageList ; | ε
PackageList -> Package PackageList'
PackageList' -> , Package PackageList' | ε

--------------------------------------------------DeclarationSec--------------------------------------------------------
DeclarationSec -> Declaration ProcedureDeclarationSec  //
Declaration -> DeclarationType | ε
DeclarationType -> VarDecl |  ConstDecl |  TypeDecl

VarDecl → var VarDecl' | ε
VarDecl' → VarIdList VarDecl2 : Datatype;   // Check this again later
VarDecl2 → VarDecl' | ε

ConstDecl -> const ConstDecl' | ε
ConstDecl' -> Identifier = Constant; ConstDecl2
ConstDecl2 -> ConstDecl' | ε

TypeDecl -> type TypeDecl' | ε
TypeDecl' -> TypeIdList TypeDecl2 : DataType;
TypeDecl2 -> TypeDecl' | ε

ProcedureDeclarationSec -> ProcedureDec FunctionDecS | FunctionDecS ProcedureDec | FunctionDecS | ProcedureDec | ε
ProcedureDec -> ProcedureDec' | ε
FunctionDecS -> FunctionDecS' | ε

ProcedureDec' -> ProcedureHeader LocalDeclaration ProcedureBlock
FunctionDecS' -> FunctionHeader LocalDeclaration FunctionBlock

ProcedureHeader -> procedure ProcedureName (ArgumentsIdList) : Datatype;
FunctionHeader -> function FunctionName (ArgumentsIdList) : Datatype;

ProcedureName -> Identifier
FunctionName -> Identifier

ArgumentsIdList -> DeclarationType ParametersList : Datatype DefaultValue; ArgumentsIdList |ParametersList : Datatype DefaultValue;

ParametersList -> ParametersList , identifier | identifier
ParametersList -> identifier ParametersList*
ParametersList* -> , identifier   ParametersList* | ε

DefaultValue -> ε | = Constant

--------------------------------------------------Execution-------------------------------------------------------------

ProcedureBlock -> begin ProcedureStatements end;
FunctionBlock -> begin FunctionStatements end;









CompareOperators → > | < | = | >= | <= | not | and | or | xor
ArithmaticOperators -> MultDivOp | AddMinusOp
MultDivOp -> * | /
AddMinusOp -> + |-

DataType -> integer| real| char| string| Boolean
Constant -> constant | string| boolean | char| integer //